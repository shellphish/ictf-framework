
import os
import random
import requests
import sys
import string
import yaml
import json
import time

rnd = random.SystemRandom()

# THIS PATH ARE RELATIVE TO WHERE TERRAFORM WILL BE LAUNCHED BECAUSE
# THEY ARE USED IN THE PROVISIONING SECTION.
PROV_FOLDER = os.path.dirname(os.path.abspath(__file__))
SECRETS_FOLDER = os.path.join(PROV_FOLDER, '../../secrets/')
VM_PROVISIONED_NAME = "database"

def get_all_teams(db_api_base_url, db_secret):
    teams_info_url = db_api_base_url + "/teams/info"
    print(teams_info_url)
    result = requests.get(teams_info_url, params={'secret': db_secret})
    try:
        response = result.json()
    except Exception as ex:
        raise Exception("Invalid JSON returned from /teams/info endpoint: {}".format(result.content)) from ex
    print(response)
    return response['teams']


def create_team(db_api_base_url, db_secret, team_id, name, country, logo, team_email, team_password, url,
                academic_team, login_token, flag_token):
    params = {'secret': db_secret}
    data = {"name": name, "country": country, "logo": logo, "team_email": team_email, "team_password": team_password,
            "url": url, "academic_team": academic_team, "id": team_id,
            "login_token": login_token, "flag_token": flag_token}

    result = requests.post(db_api_base_url + "/team/add_direct", data=data, params=params)
    print(result.content)
    response = result.json()
    if response['result'] == "success":
        return response['team_id']
    else:
        print("ERROR %s" % response['fail_reason'])
        raise Exception("Couldn't create team id %s name %s." % (team_id, name))


def validate_team(db_api_base_url, db_secret, new_team_id):
    update_team_url = db_api_base_url + "/team/update/{}".format(new_team_id)
    data = {"validated": '1'}
    result = requests.post(update_team_url, data=data, params={'secret': db_secret})
    response = result.json()
    if response['result'] == "success":
        print("Team %s successfully created and validated" % new_team_id)
    else:
        print("Team %s  could not be validated!!!!!" % new_team_id)


def add_teams_info(db_api_base_url, db_secret, game_config):

    # get all the teams in the DB that are currently created
    current_teams = get_all_teams(db_api_base_url, db_secret)

    for team in game_config['teams']:

        # check to see if this team is already in the DB, if so let's skip
        if str(team['id']) in current_teams:
            cur_team = current_teams[str(team['id'])]
            if cur_team['name'] != team['name']:
                print("Already a team in the DB with the requested id %s but with a different name %s != %s" % (team['id'], team['name'], cur_team['name']))
                continue
            if cur_team['email'] != team['email']:
                print("Already a team in the DB with the requested id %s but with different email %s != %s" % (team['id'], team['email'], cur_team['email']))
                continue
                print("Team %s already exists in the DB, but it looks like all the info is OK" % (team['id'],))
            continue

        gm_token = ''.join(rnd.choice(string.ascii_letters + string.digits) for _ in range(16))

        login_token = ''.join(rnd.choice(string.ascii_letters + string.digits) for _ in range(32)) # must get rid of this shit
        flag_token = team['flag_token']

        
        team_id = create_team(db_api_base_url, db_secret, team['id'], team['name'], team['country'], team['logo'], team['email'],
                              gm_token, team['url'], team['academic_team'], login_token, flag_token)
        if team_id:
            validate_team(db_api_base_url, db_secret, team_id)
        else:
            # The previous code was just assuming that teams would get added with increasing IDs, and had no error checking if the team couldn't be created
            pass
    # add all services


if __name__== "__main__":
    print("Waiting for database container to finish startup.")
    time.sleep(10)
    game_config = json.load(open(sys.argv[2], 'r'))
    db_api = sys.argv[1] # passed from terraform script
    database_api_secret_path = SECRETS_FOLDER+"database-api/secret"

    if os.path.isfile(database_api_secret_path):
        f = open(database_api_secret_path, "r")
        database_api_secret = f.read().rstrip()
        db_secret = database_api_secret  # to read from the folder "secrets" generated by the make_secret.sh script
        add_teams_info('http://' + db_api, db_secret, game_config)
    else:
        raise Exception("Missing database secrets!")
